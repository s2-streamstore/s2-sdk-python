# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

# TODO: had to manually replace the below statement. revisit.
from streamstore._lib.s2.v1alpha import s2_pb2 as s2_dot_v1alpha_dot_s2__pb2

GRPC_GENERATED_VERSION = "1.69.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in s2/v1alpha/s2_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AccountServiceStub(object):
    """Operate on an S2 account."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListBasins = channel.unary_unary(
            "/s2.v1alpha.AccountService/ListBasins",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.ListBasinsRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.ListBasinsResponse.FromString,
            _registered_method=True,
        )
        self.CreateBasin = channel.unary_unary(
            "/s2.v1alpha.AccountService/CreateBasin",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.CreateBasinRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.CreateBasinResponse.FromString,
            _registered_method=True,
        )
        self.DeleteBasin = channel.unary_unary(
            "/s2.v1alpha.AccountService/DeleteBasin",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.DeleteBasinRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.DeleteBasinResponse.FromString,
            _registered_method=True,
        )
        self.ReconfigureBasin = channel.unary_unary(
            "/s2.v1alpha.AccountService/ReconfigureBasin",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureBasinRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureBasinResponse.FromString,
            _registered_method=True,
        )
        self.GetBasinConfig = channel.unary_unary(
            "/s2.v1alpha.AccountService/GetBasinConfig",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.GetBasinConfigRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.GetBasinConfigResponse.FromString,
            _registered_method=True,
        )


class AccountServiceServicer(object):
    """Operate on an S2 account."""

    def ListBasins(self, request, context):
        """List basins."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateBasin(self, request, context):
        """Create a new basin.
        Provide a client request token with the `S2-Request-Token` header for idempotent retry behaviour.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteBasin(self, request, context):
        """Delete a basin.
        Basin deletion is asynchronous, and may take a few minutes to complete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReconfigureBasin(self, request, context):
        """Update basin configuration."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetBasinConfig(self, request, context):
        """Get basin configuration."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListBasins": grpc.unary_unary_rpc_method_handler(
            servicer.ListBasins,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.ListBasinsRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.ListBasinsResponse.SerializeToString,
        ),
        "CreateBasin": grpc.unary_unary_rpc_method_handler(
            servicer.CreateBasin,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.CreateBasinRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.CreateBasinResponse.SerializeToString,
        ),
        "DeleteBasin": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteBasin,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.DeleteBasinRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.DeleteBasinResponse.SerializeToString,
        ),
        "ReconfigureBasin": grpc.unary_unary_rpc_method_handler(
            servicer.ReconfigureBasin,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureBasinRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureBasinResponse.SerializeToString,
        ),
        "GetBasinConfig": grpc.unary_unary_rpc_method_handler(
            servicer.GetBasinConfig,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.GetBasinConfigRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.GetBasinConfigResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "s2.v1alpha.AccountService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "s2.v1alpha.AccountService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class AccountService(object):
    """Operate on an S2 account."""

    @staticmethod
    def ListBasins(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.AccountService/ListBasins",
            s2_dot_v1alpha_dot_s2__pb2.ListBasinsRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.ListBasinsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateBasin(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.AccountService/CreateBasin",
            s2_dot_v1alpha_dot_s2__pb2.CreateBasinRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.CreateBasinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteBasin(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.AccountService/DeleteBasin",
            s2_dot_v1alpha_dot_s2__pb2.DeleteBasinRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.DeleteBasinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReconfigureBasin(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.AccountService/ReconfigureBasin",
            s2_dot_v1alpha_dot_s2__pb2.ReconfigureBasinRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.ReconfigureBasinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetBasinConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.AccountService/GetBasinConfig",
            s2_dot_v1alpha_dot_s2__pb2.GetBasinConfigRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.GetBasinConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class BasinServiceStub(object):
    """Operate on an S2 basin."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListStreams = channel.unary_unary(
            "/s2.v1alpha.BasinService/ListStreams",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.ListStreamsRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.ListStreamsResponse.FromString,
            _registered_method=True,
        )
        self.CreateStream = channel.unary_unary(
            "/s2.v1alpha.BasinService/CreateStream",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.CreateStreamRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.CreateStreamResponse.FromString,
            _registered_method=True,
        )
        self.DeleteStream = channel.unary_unary(
            "/s2.v1alpha.BasinService/DeleteStream",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.DeleteStreamRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.DeleteStreamResponse.FromString,
            _registered_method=True,
        )
        self.GetStreamConfig = channel.unary_unary(
            "/s2.v1alpha.BasinService/GetStreamConfig",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.GetStreamConfigRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.GetStreamConfigResponse.FromString,
            _registered_method=True,
        )
        self.ReconfigureStream = channel.unary_unary(
            "/s2.v1alpha.BasinService/ReconfigureStream",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureStreamRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureStreamResponse.FromString,
            _registered_method=True,
        )


class BasinServiceServicer(object):
    """Operate on an S2 basin."""

    def ListStreams(self, request, context):
        """List streams."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateStream(self, request, context):
        """Create a stream.
        Provide a client request token with the `S2-Request-Token` header for idempotent retry behaviour.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteStream(self, request, context):
        """Delete a stream.
        Stream deletion is asynchronous, and may take a few minutes to complete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetStreamConfig(self, request, context):
        """Get stream configuration."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReconfigureStream(self, request, context):
        """Update stream configuration."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BasinServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListStreams": grpc.unary_unary_rpc_method_handler(
            servicer.ListStreams,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.ListStreamsRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.ListStreamsResponse.SerializeToString,
        ),
        "CreateStream": grpc.unary_unary_rpc_method_handler(
            servicer.CreateStream,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.CreateStreamRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.CreateStreamResponse.SerializeToString,
        ),
        "DeleteStream": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteStream,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.DeleteStreamRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.DeleteStreamResponse.SerializeToString,
        ),
        "GetStreamConfig": grpc.unary_unary_rpc_method_handler(
            servicer.GetStreamConfig,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.GetStreamConfigRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.GetStreamConfigResponse.SerializeToString,
        ),
        "ReconfigureStream": grpc.unary_unary_rpc_method_handler(
            servicer.ReconfigureStream,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureStreamRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.ReconfigureStreamResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "s2.v1alpha.BasinService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "s2.v1alpha.BasinService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class BasinService(object):
    """Operate on an S2 basin."""

    @staticmethod
    def ListStreams(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.BasinService/ListStreams",
            s2_dot_v1alpha_dot_s2__pb2.ListStreamsRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.ListStreamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.BasinService/CreateStream",
            s2_dot_v1alpha_dot_s2__pb2.CreateStreamRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.CreateStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.BasinService/DeleteStream",
            s2_dot_v1alpha_dot_s2__pb2.DeleteStreamRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.DeleteStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetStreamConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.BasinService/GetStreamConfig",
            s2_dot_v1alpha_dot_s2__pb2.GetStreamConfigRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.GetStreamConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReconfigureStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.BasinService/ReconfigureStream",
            s2_dot_v1alpha_dot_s2__pb2.ReconfigureStreamRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.ReconfigureStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class StreamServiceStub(object):
    """Operate on an S2 stream."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckTail = channel.unary_unary(
            "/s2.v1alpha.StreamService/CheckTail",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.CheckTailRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.CheckTailResponse.FromString,
            _registered_method=True,
        )
        self.Append = channel.unary_unary(
            "/s2.v1alpha.StreamService/Append",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.AppendRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.AppendResponse.FromString,
            _registered_method=True,
        )
        self.AppendSession = channel.stream_stream(
            "/s2.v1alpha.StreamService/AppendSession",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.AppendSessionRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.AppendSessionResponse.FromString,
            _registered_method=True,
        )
        self.Read = channel.unary_unary(
            "/s2.v1alpha.StreamService/Read",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.ReadRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReadResponse.FromString,
            _registered_method=True,
        )
        self.ReadSession = channel.unary_stream(
            "/s2.v1alpha.StreamService/ReadSession",
            request_serializer=s2_dot_v1alpha_dot_s2__pb2.ReadSessionRequest.SerializeToString,
            response_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReadSessionResponse.FromString,
            _registered_method=True,
        )


class StreamServiceServicer(object):
    """Operate on an S2 stream."""

    def CheckTail(self, request, context):
        """Check the sequence number that will be assigned to the next record on a stream."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Append(self, request, context):
        """Append a batch of records to a stream."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AppendSession(self, request_iterator, context):
        """Append batches of records to a stream continuously, while guaranteeing pipelined requests are processed in order.
        If any request fails, the session is terminated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Read(self, request, context):
        """Retrieve a batch of records from a stream."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReadSession(self, request, context):
        """Retrieve batches of records from a stream continuously."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_StreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CheckTail": grpc.unary_unary_rpc_method_handler(
            servicer.CheckTail,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.CheckTailRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.CheckTailResponse.SerializeToString,
        ),
        "Append": grpc.unary_unary_rpc_method_handler(
            servicer.Append,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.AppendRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.AppendResponse.SerializeToString,
        ),
        "AppendSession": grpc.stream_stream_rpc_method_handler(
            servicer.AppendSession,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.AppendSessionRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.AppendSessionResponse.SerializeToString,
        ),
        "Read": grpc.unary_unary_rpc_method_handler(
            servicer.Read,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReadRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.ReadResponse.SerializeToString,
        ),
        "ReadSession": grpc.unary_stream_rpc_method_handler(
            servicer.ReadSession,
            request_deserializer=s2_dot_v1alpha_dot_s2__pb2.ReadSessionRequest.FromString,
            response_serializer=s2_dot_v1alpha_dot_s2__pb2.ReadSessionResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "s2.v1alpha.StreamService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "s2.v1alpha.StreamService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class StreamService(object):
    """Operate on an S2 stream."""

    @staticmethod
    def CheckTail(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.StreamService/CheckTail",
            s2_dot_v1alpha_dot_s2__pb2.CheckTailRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.CheckTailResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Append(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.StreamService/Append",
            s2_dot_v1alpha_dot_s2__pb2.AppendRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.AppendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def AppendSession(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/s2.v1alpha.StreamService/AppendSession",
            s2_dot_v1alpha_dot_s2__pb2.AppendSessionRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.AppendSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Read(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/s2.v1alpha.StreamService/Read",
            s2_dot_v1alpha_dot_s2__pb2.ReadRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.ReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReadSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/s2.v1alpha.StreamService/ReadSession",
            s2_dot_v1alpha_dot_s2__pb2.ReadSessionRequest.SerializeToString,
            s2_dot_v1alpha_dot_s2__pb2.ReadSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
