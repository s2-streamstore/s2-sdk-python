# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/s2-streamstore/s2-sdk-python" },
]
# output file path
output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '(update `README` \(#10\))', replace = "docs: $1" },
  { pattern = '(organize imports and add a few external links in docs \(#7\))', replace = "chore: $1" },
  { pattern = '(validate `AppendInput`, expose `metered_bytes`, misc. docs polish \(#8\))', replace = "chore: $1" },
  { pattern = '(betterproto -> grpcio \(#5\))', replace = "refactor: swap gRPC dependency i.e. $1" },
  { pattern = "initial commit", replace_command = '[ "$COMMIT_SHA" == "d05d55a8396ab276055c3aacd00b8d1951d15e7c" ] && echo "feat: Async S2 client with core functionalities ([d05d55a](https://github.com/s2-streamstore/s2-sdk-python/commit/d05d55a8396ab276055c3aacd00b8d1951d15e7c))" || echo "initial commit"' },
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 --> Features" },
  { message = "^fix", group = "<!-- 1 --> Bug Fixes" },
  { message = "^refactor", group = "<!-- 2 --> Refactor" },
  { message = "^doc", group = "<!-- 3 --> Documentation" },
  { message = "^perf", group = "<!-- 4 --> Performance" },
  { message = "^style", group = "<!-- 5 --> Styling" },
  { message = "^test", group = "<!-- 6 --> Testing" },
  { message = "^chore", group = "<!-- 7 --> Miscellaneous Tasks" },
  { message = "^revert", group = "<!-- 8 --> Revert" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
